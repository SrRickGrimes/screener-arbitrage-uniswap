/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FlashswapInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BiswapCall"
      | "cafeCall"
      | "check"
      | "jetswapCall"
      | "owner"
      | "pancakeCall"
      | "pantherCall"
      | "start"
      | "swapV2Call"
      | "uniswapV2Call"
      | "wardenCall"
      | "waultSwapCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "BiswapCall",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cafeCall",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "check",
    values: [AddressLike, BigNumberish, AddressLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "jetswapCall",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pancakeCall",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pantherCall",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "start",
    values: [
      BigNumberish,
      AddressLike,
      BigNumberish,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapV2Call",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV2Call",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wardenCall",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "waultSwapCall",
    values: [AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "BiswapCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cafeCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "jetswapCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pancakeCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pantherCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapV2Call", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV2Call",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wardenCall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "waultSwapCall",
    data: BytesLike
  ): Result;
}

export interface Flashswap extends BaseContract {
  connect(runner?: ContractRunner | null): Flashswap;
  waitForDeployment(): Promise<this>;

  interface: FlashswapInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BiswapCall: TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  cafeCall: TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  check: TypedContractMethod<
    [
      _tokenBorrow: AddressLike,
      _amountTokenPay: BigNumberish,
      _tokenPay: AddressLike,
      _sourceRouter: AddressLike,
      _targetRouter: AddressLike
    ],
    [[bigint, bigint]],
    "view"
  >;

  jetswapCall: TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pancakeCall: TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  pantherCall: TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  start: TypedContractMethod<
    [
      _maxBlockNumber: BigNumberish,
      _tokenBorrow: AddressLike,
      _amountTokenPay: BigNumberish,
      _tokenPay: AddressLike,
      _sourceRouter: AddressLike,
      _targetRouter: AddressLike,
      _sourceFactory: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  swapV2Call: TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  uniswapV2Call: TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  wardenCall: TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  waultSwapCall: TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BiswapCall"
  ): TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cafeCall"
  ): TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "check"
  ): TypedContractMethod<
    [
      _tokenBorrow: AddressLike,
      _amountTokenPay: BigNumberish,
      _tokenPay: AddressLike,
      _sourceRouter: AddressLike,
      _targetRouter: AddressLike
    ],
    [[bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "jetswapCall"
  ): TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pancakeCall"
  ): TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "pantherCall"
  ): TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "start"
  ): TypedContractMethod<
    [
      _maxBlockNumber: BigNumberish,
      _tokenBorrow: AddressLike,
      _amountTokenPay: BigNumberish,
      _tokenPay: AddressLike,
      _sourceRouter: AddressLike,
      _targetRouter: AddressLike,
      _sourceFactory: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "swapV2Call"
  ): TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uniswapV2Call"
  ): TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wardenCall"
  ): TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "waultSwapCall"
  ): TypedContractMethod<
    [
      _sender: AddressLike,
      _amount0: BigNumberish,
      _amount1: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}
